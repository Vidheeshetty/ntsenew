"""HTML renderer for paper trading reports.

Generates comprehensive HTML reports with trade summaries, performance metrics,
and interactive charts for paper trading results.
"""

from datetime import datetime
from pathlib import Path
from typing import Dict, Any

__all__ = ["HTMLPaperTradingRenderer"]


class HTMLPaperTradingRenderer:
    """Renders paper trading reports in HTML format with CSS styling."""

    def __init__(self, output_dir: str = "reports"):
        self.output_dir = Path(output_dir)
        self.output_dir.mkdir(exist_ok=True)

    def render(self, data: Dict[str, Any], filename: str = None) -> Path:
        """Render paper trading data to HTML report.

        Args:
            data: Paper trading results dictionary
            filename: Optional output filename (auto-generated if None)

        Returns:
            Path to generated HTML file
        """
        if filename is None:
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            filename = f"paper_trading_report_{timestamp}.html"

        output_path = self.output_dir / filename

        # Generate HTML content
        html_content = self._generate_html(data)

        # Write to file
        output_path.write_text(html_content, encoding="utf-8")

        return output_path

    def _generate_html(self, data: Dict[str, Any]) -> str:
        """Generate HTML content from paper trading data."""
        return f"""
        <!DOCTYPE html>
        <html lang="en">
        <head>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <title>Paper Trading Report</title>
            <link rel="stylesheet" href="/assets/css/report-style.css">
        </head>
        <body>
            <div class="container">
                <header>
                    <h1>Paper Trading Report</h1>
                    <p>Generated on {datetime.now().strftime("%Y-%m-%d %H:%M:%S")}</p>
                </header>
                
                <main>
                    <section class="summary">
                        <h2>Performance Summary</h2>
                        <div class="metrics-grid">
                            <div class="metric">
                                <span class="label">Total PnL:</span>
                                <span class="value">{data.get("total_pnl", 0):.2f}</span>
                            </div>
                            <div class="metric">
                                <span class="label">Win Rate:</span>
                                <span class="value">{data.get("win_rate", 0):.1f}%</span>
                            </div>
                            <div class="metric">
                                <span class="label">Total Trades:</span>
                                <span class="value">{data.get("total_trades", 0)}</span>
                            </div>
                        </div>
                    </section>
                    
                    <section class="trades">
                        <h2>Trade Details</h2>
                        <div class="trades-table">
                            {self._generate_trades_table(data.get("trades", []))}
                        </div>
                    </section>
                </main>
                
                <footer>
                    <p>Generated by NTbasedPlatform Paper Trading System</p>
                </footer>
            </div>
        </body>
        </html>
        """

    def _generate_trades_table(self, trades: list) -> str:
        """Generate HTML table for trades data."""
        if not trades:
            return "<p>No trades recorded.</p>"

        table_rows = ""
        for trade in trades:
            table_rows += f"""
            <tr>
                <td>{trade.get("Entry_Date", "N/A")}</td>
                <td>{trade.get("Instrument", "N/A")}</td>
                <td>{trade.get("Trade_Type", "N/A")}</td>
                <td>{trade.get("Entry_Price", 0):.2f}</td>
                <td>{trade.get("Exit_Price", 0):.2f}</td>
                <td class="{"profit" if trade.get("Realised_PnL", 0) > 0 else "loss"}">
                    {trade.get("Realised_PnL", 0):.2f}
                </td>
            </tr>
            """

        return f"""
        <table>
            <thead>
                <tr>
                    <th>Date</th>
                    <th>Instrument</th>
                    <th>Type</th>
                    <th>Entry Price</th>
                    <th>Exit Price</th>
                    <th>PnL</th>
                </tr>
            </thead>
            <tbody>
                {table_rows}
            </tbody>
        </table>
        """

    async def initialize(self, session_dir: Path):  # noqa: D401
        """Called once at reporter start – create static asset folders here."""
        self._session_dir = Path(session_dir)
        self._session_dir.mkdir(parents=True, exist_ok=True)

    # ------------------------------------------------------------------
    async def render_live_dashboard(self, snapshot: Dict[str, Any], session_data):  # noqa: D401
        """Return a simple live dashboard HTML string."""
        ts = snapshot.get("timestamp", datetime.utcnow())
        metrics = snapshot.get("metrics", {})
        body_lines = [f"<h1>Live Dashboard – {ts}</h1>"]
        if metrics:
            body_lines.append("<h2>Key Metrics</h2><ul>")
            for k, v in metrics.items():
                body_lines.append(f"<li><b>{k}:</b> {v}</li>")
            body_lines.append("</ul>")
        return "<html><body>" + "\n".join(body_lines) + "</body></html>"

    # ------------------------------------------------------------------
    async def render_full_report(self, session_data, final_metrics):  # noqa: D401
        """Return an end-of-day static report."""
        lines = [
            "<html><body>",
            f"<h1>Paper Trading Report – Session {session_data.get('start_time')}</h1>",
            "<h2>Final Metrics</h2>",
            "<ul>",
        ]
        for k, v in final_metrics.items():
            lines.append(f"<li><b>{k}:</b> {v}</li>")
        lines.extend(["</ul>", "</body></html>"])
        return "\n".join(lines)
